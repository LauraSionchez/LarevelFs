<?php

namespace App\Http\Controllers;

use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;
use Illuminate\Support\Facades\Redirect;
use App\Models\PosRegister;
use App\Models\Storage;
use App\Models\Provider;
use App\Models\Models;
use App\Models\PosBoxe;
use App\Models\PosInventory;
use Illuminate\Http\Request;
use Validator;
use Auth;

class PosRegisterController extends Controller
{
    public function pos_register()
    {
       if(\Request::ajax()){
            $provider = Provider::pluck('name_provider','id');
            $model    = Models::where('status', 1)->get();
            $models   = [];
            $models_quantity = [];
            $worksheet = [];
            $statistics = [];
            foreach($model as $key => $value){
                $models[$value->id] = $value->getTradeMark->name_trade_mark . ' ' . $value->serial;
                $models_quantity[$value->id] = ['data-quantity'=>$value->quantity, 'data-serial'=>$value->serial];
            }
            $boxe     = PosBoxe::pluck('number_box', 'initial_serial', 'number_lot'); 

            return view('pos_register.pos_register', compact('provider','models','boxe', 'models_quantity', 'worksheet','statistics'));  
        }else{
            return Redirect::to('PO002.register');
        }      
    }


    public function pos_register_store(Request $request)
    {
         if(\Request::ajax()){
          $messages = [
               'provider_hidden.required'    => __('Provider Required'),
               'invoice_hidden.required'     => __('Invoice number Required'),  
            ];
            
             $validator = Validator::make($request->all(), [
                'provider_hidden'           => 'required',
                'invoice_hidden'            => 'required',
            ], $messages);


            if ($validator->fails()) {
                $result['status'] = 0;
                $result['title'] = __('POS Register');
                $result['message'] = '';
                foreach ($validator->errors()->all() as $key => $value) {
                    $result['message'] .= $value.'<br/>';
                }
                $result['data'] = null;
                $result['type_message'] = 'error';
                return $result;
            }else{
                try {
                    $PosRegister = new PosRegister();
                    $PosRegister->provider_id       =$request->provider_hidden;
                    $PosRegister->number_control    =$request->invoice_hidden;
                    $PosRegister->user_id        = Auth::user()->id; 
                    $PosRegister->date_register  = now(); 
                    $PosRegister->ip             = \Request::ip(); 

                    $PosRegister->save();

                    foreach($request->boxes as $key => $value) {

                        $model  = Models::where('id', '=', $value['model_id'])->select('serial')->get();

                        $PosBoxe = new PosBoxe();
                        $PosBoxe->number_box       = $value['number_box'];
                        $PosBoxe->model_id         = $value['model_id'];
                        $PosBoxe->initial_serial   = $model[0]['serial'].FullSerial($value['initial_serial'],6);
                        $PosBoxe->number_lot       = $value['number_lot'];
                        $PosBoxe->pos_register_id  = $PosRegister->id;

                        $PosBoxe->save();

                        $model = Models::find($PosBoxe->model_id);
                        for($i=0; $i<$model->quantity; $i++) {
                            $PosInventory = new PosInventory();
                            $PosInventory->pos_box_id        = $PosBoxe['id'];
                            $PosInventory->serial            = $value['initial_serial'] + $i;
                            $PosInventory->save();
                        }
                    }
                    $result['status'] = 1;
                    $result['title'] = __('');
                    $result['message'] =  __('Almacenado exitosamente');
                    $result['type_message'] = 'success';
                    $result['redirect'] = route('pos_register');
                } catch (Exception $e) {
                    $result['status'] = 0;
                    $result['title'] = __('Error en busqueda');
                    $result['message']      = $e->getMessage();
                    $result['type_message'] = 'error';
                    $result['redirect'] = "";
                } 
                return $result;                
            }
        }else{          
            return Redirect::to('home');
        }
    }

    public function save_excel(Request $request)
    {
        //dd($request->all());
        $messages = [
            //'excel.required'               => __('excel requerido'),
        ]; 
        $validator =  Validator::make($request->all(), [
           // 'excel'            => 'required',
        ], $messages);

    if ($validator->fails()) {
        $result['status'] = 0;
        $result['title'] = __('Carga de archivo excel');
        $result['message'] = '';
        foreach ($validator->errors()->all() as $key => $value) {
            $result['message'] .= $value.'<br/>';
        }
        $result['data'] = null;
        $result['type_message'] = 'error';
        return $result;
    }else{
        try{

            $inputFileName = $request->add_excel;

            $folder_name = $inputFileName->getClientOriginalName();

            $reader = \PhpOffice\PhpSpreadsheet\IOFactory::createReader('Xlsx');
            $reader->setReadDataOnly(TRUE);

            $spreadsheet = $reader->load($inputFileName);

            $worksheet = $spreadsheet->getActiveSheet()->toArray();

           // $request->file('excel')->storeAs('public/Pos_register_excel', date("Y_m_d_H_i_s").'_'.$folder_name);

          //dd($worksheet);
        }catch (\Exception $e) {
            $result['status'] = 0;
            $result['title'] = __('Carga de archivo excel');
            $result['message'] = $e->getMessage();
            $result['data'] = null;
            $result['type_message'] = 'error';
            return $result;
        }
    }

   // return view('pos_register.pos_register', compact('worksheet'));
        $before = 0;
        $data = array();
        //dd($worksheet);
        foreach($worksheet as $key => $value) {
            if($key != 0) {
                $data[$key][0]=$value[0];
                $m_act = (int)($value[0]/1000000);
                if ($key == 1){
                    $m_prev= $m_act;    
                }else{
                    $m_prev= (int)($worksheet[$key-1][0]/1000000);;                     
                }

                if ($value[1]==null && $m_act == $m_prev  ){

                    $data[$key][1]=$before;
                   
                }else{
                    $data[$key][1]=$value[1];
                    $before = $value[1];
                
                }
            }  
        }
        //dd($data);
        
        $statistics = array();
        $list_models = array();
        foreach($data as $key => $value) {
            $model = (int)($value[0]/1000000);
            $list_models[] = $model;
            if(isset($statistics[$model][$value[1]])) {
                $statistics[$model][$value[1]]++;
            }else{
                $statistics[$model][$value[1]] = 1;
            }
        }

        $Models = Models::whereIn('serial', $list_models)->pluck('serial');
        //dd($Models);

      //dd($statistics);
      return response()->json(array("statistics"=>$statistics, "models_good"=>$Models));
    }
    
}

